/*
 * ORY Hydra
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.hydra.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The general form represented is:  [scheme:][//[userinfo@]host][/]path[?query][#fragment]  URLs that do not start with a slash after the scheme are interpreted as:  scheme:opaque[?query][#fragment]  Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/. A consequence is that it is impossible to tell which slashes in the Path were slashes in the raw URL and which were %2f. This distinction is rarely important, but when it is, the code should use RawPath, an optional field which only gets set if the default encoding is different from Path.  URL&#39;s String method uses the EscapedPath method to obtain the path. See the EscapedPath method for more details.
 */
@ApiModel(description = "The general form represented is:  [scheme:][//[userinfo@]host][/]path[?query][#fragment]  URLs that do not start with a slash after the scheme are interpreted as:  scheme:opaque[?query][#fragment]  Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/. A consequence is that it is impossible to tell which slashes in the Path were slashes in the raw URL and which were %2f. This distinction is rarely important, but when it is, the code should use RawPath, an optional field which only gets set if the default encoding is different from Path.  URL's String method uses the EscapedPath method to obtain the path. See the EscapedPath method for more details.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-01-08T11:33:47.803525Z[GMT]")
public class URL {
  public static final String SERIALIZED_NAME_FORCE_QUERY = "ForceQuery";
  @SerializedName(SERIALIZED_NAME_FORCE_QUERY)
  private Boolean forceQuery;

  public static final String SERIALIZED_NAME_FRAGMENT = "Fragment";
  @SerializedName(SERIALIZED_NAME_FRAGMENT)
  private String fragment;

  public static final String SERIALIZED_NAME_HOST = "Host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_OPAQUE = "Opaque";
  @SerializedName(SERIALIZED_NAME_OPAQUE)
  private String opaque;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_RAW_PATH = "RawPath";
  @SerializedName(SERIALIZED_NAME_RAW_PATH)
  private String rawPath;

  public static final String SERIALIZED_NAME_RAW_QUERY = "RawQuery";
  @SerializedName(SERIALIZED_NAME_RAW_QUERY)
  private String rawQuery;

  public static final String SERIALIZED_NAME_SCHEME = "Scheme";
  @SerializedName(SERIALIZED_NAME_SCHEME)
  private String scheme;

  public static final String SERIALIZED_NAME_USER = "User";
  @SerializedName(SERIALIZED_NAME_USER)
  private Object user;


  public URL forceQuery(Boolean forceQuery) {
    
    this.forceQuery = forceQuery;
    return this;
  }

   /**
   * force query
   * @return forceQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "force query")

  public Boolean getForceQuery() {
    return forceQuery;
  }


  public void setForceQuery(Boolean forceQuery) {
    this.forceQuery = forceQuery;
  }


  public URL fragment(String fragment) {
    
    this.fragment = fragment;
    return this;
  }

   /**
   * fragment
   * @return fragment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "fragment")

  public String getFragment() {
    return fragment;
  }


  public void setFragment(String fragment) {
    this.fragment = fragment;
  }


  public URL host(String host) {
    
    this.host = host;
    return this;
  }

   /**
   * host
   * @return host
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "host")

  public String getHost() {
    return host;
  }


  public void setHost(String host) {
    this.host = host;
  }


  public URL opaque(String opaque) {
    
    this.opaque = opaque;
    return this;
  }

   /**
   * opaque
   * @return opaque
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "opaque")

  public String getOpaque() {
    return opaque;
  }


  public void setOpaque(String opaque) {
    this.opaque = opaque;
  }


  public URL path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * path
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "path")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public URL rawPath(String rawPath) {
    
    this.rawPath = rawPath;
    return this;
  }

   /**
   * raw path
   * @return rawPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "raw path")

  public String getRawPath() {
    return rawPath;
  }


  public void setRawPath(String rawPath) {
    this.rawPath = rawPath;
  }


  public URL rawQuery(String rawQuery) {
    
    this.rawQuery = rawQuery;
    return this;
  }

   /**
   * raw query
   * @return rawQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "raw query")

  public String getRawQuery() {
    return rawQuery;
  }


  public void setRawQuery(String rawQuery) {
    this.rawQuery = rawQuery;
  }


  public URL scheme(String scheme) {
    
    this.scheme = scheme;
    return this;
  }

   /**
   * scheme
   * @return scheme
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "scheme")

  public String getScheme() {
    return scheme;
  }


  public void setScheme(String scheme) {
    this.scheme = scheme;
  }


  public URL user(Object user) {
    
    this.user = user;
    return this;
  }

   /**
   * Userinfo Userinfo Userinfo Userinfo Userinfo The Userinfo type is an immutable encapsulation of username and password details for a URL. An existing Userinfo value is guaranteed to have a username set (potentially empty, as allowed by RFC 2396), and optionally a password.
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Userinfo Userinfo Userinfo Userinfo Userinfo The Userinfo type is an immutable encapsulation of username and password details for a URL. An existing Userinfo value is guaranteed to have a username set (potentially empty, as allowed by RFC 2396), and optionally a password.")

  public Object getUser() {
    return user;
  }


  public void setUser(Object user) {
    this.user = user;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    URL URL = (URL) o;
    return Objects.equals(this.forceQuery, URL.forceQuery) &&
        Objects.equals(this.fragment, URL.fragment) &&
        Objects.equals(this.host, URL.host) &&
        Objects.equals(this.opaque, URL.opaque) &&
        Objects.equals(this.path, URL.path) &&
        Objects.equals(this.rawPath, URL.rawPath) &&
        Objects.equals(this.rawQuery, URL.rawQuery) &&
        Objects.equals(this.scheme, URL.scheme) &&
        Objects.equals(this.user, URL.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forceQuery, fragment, host, opaque, path, rawPath, rawQuery, scheme, user);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class URL {\n");
    sb.append("    forceQuery: ").append(toIndentedString(forceQuery)).append("\n");
    sb.append("    fragment: ").append(toIndentedString(fragment)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    opaque: ").append(toIndentedString(opaque)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    rawPath: ").append(toIndentedString(rawPath)).append("\n");
    sb.append("    rawQuery: ").append(toIndentedString(rawQuery)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

